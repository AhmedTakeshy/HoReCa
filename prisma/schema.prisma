generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  user_id           BigInt?
  id_token          String?
  token_type        String?
  refresh_token     String?
  scope             String?
  session_state     String?
  expires_at        Int?
  userId            Int     @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @default(nanoid())
  email     String    @unique
  username  String
  password  String
  role      Role?     @default(USER)
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  cart      Cart?
  orders    Order[]
  wishlist  Wishlist?

  @@index([email], type: Hash)
}

enum Role {
  USER
  ADMIN
}

model Cart {
  id        Int        @id @default(autoincrement())
  publicId  String     @unique @default(nanoid())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]

  @@index([userId], type: Hash)
}

model CartItem {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId], type: Hash)
}

model Product {
  id            Int           @id @default(autoincrement())
  publicId      String        @unique @default(nanoid())
  title         String
  description   String
  thumbnail     String
  images        String[]
  price         Int
  stock         Int
  category      String
  brand         String
  ratings       Float
  cartItems     CartItem?
  orderItems    OrderItem?
  wishlistItems WishlistItem?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([title], type: Hash)
  @@index([category], type: Hash)
  @@index([brand], type: Hash)
}

model Order {
  id         Int         @id @default(autoincrement())
  publicId   String      @unique @default(nanoid())
  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  totalPrice Float
  status     Status

  @@index([userId], type: Hash)
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId], type: Hash)
}

model Wishlist {
  id            Int            @id @default(autoincrement())
  publicId      String         @unique @default(nanoid())
  userId        Int            @unique
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wishlistItems WishlistItem[]

  @@index([userId], type: Hash)
}

model WishlistItem {
  id         Int      @id @default(autoincrement())
  productId  Int      @unique
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlistId Int      @unique
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId], type: Hash)
}
