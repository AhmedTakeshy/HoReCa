generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  user_id           BigInt?
  id_token          String?
  token_type        String?
  refresh_token     String?
  scope             String?
  session_state     String?
  expires_at        Int?
  userId            Int     @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @default(nanoid())
  email     String    @unique
  username  String
  password  String
  role      Role?     @default(USER)
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  cart      Cart?
  orders    Order[]
  wishlist  Wishlist?

  @@index([email], type: Hash)
}

enum Role {
  USER
  ADMIN
}

model Cart {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @default(nanoid())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]

  @@index([userId], type: Hash)
}

model Product {
  id          Int        @id @default(autoincrement())
  publicId    String     @unique @default(nanoid())
  title       String
  description String
  thumbnail   String
  images      String[]
  price       Int
  stock       Int
  category    String
  brand       String
  ratings     Float
  quantity    Int        @default(0)
  orders      Order[]
  wishlist    Wishlist[]
  cart        Cart[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([title], type: Hash)
  @@index([category], type: Hash)
  @@index([brand], type: Hash)
}

model Order {
  id         Int       @id @default(autoincrement())
  publicId   String    @unique @default(nanoid())
  userId     Int
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
  totalPrice Float
  status     Status

  @@index([userId], type: Hash)
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

model Wishlist {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @default(nanoid())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([userId], type: Hash)
}
