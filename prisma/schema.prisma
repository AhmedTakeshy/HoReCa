generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  user_id           BigInt?
  id_token          String?
  token_type        String?
  refresh_token     String?
  scope             String?
  session_state     String?
  expires_at        Int?
  userId            Int     @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model User {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @default(nanoid())
  email     String    @unique
  username  String
  password  String
  role      Role?     @default(user)
  accounts  Account[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  reviews   Review[]
  ratings   Rating[]
  cart      Cart?
  orders    Order[]
  wishlist  wishlist?

  @@index([email], type: Hash)
}

enum Role {
  user
  admin
}

model Review {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(nanoid())
  title     String
  body      String
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt

  @@index(fields: [authorId(createdAt(sort: Desc)), productId(createdAt(sort: Desc))])
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId(createdAt(sort: Desc)), productId(createdAt(sort: Desc))])
}

model Cart {
  id            Int       @id @default(autoincrement())
  publicId      String    @unique @default(nanoid())
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
  totalAmount   Float
  totalQuantity Int

  @@index([userId], type: Hash)
}

model Product {
  id          Int            @id @default(autoincrement())
  publicId    String         @unique @default(nanoid())
  title       String
  description String
  thumbnail   String
  images      ProductImage[]
  price       Float
  stock       Int
  category    String
  brand       String
  cartId      Int            @unique
  cart        Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  reviews     Review[]
  ratings     Rating[]
  orders      Order[]
  wishlistId  Int            @unique
  wishlist    wishlist       @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([title], type: Hash)
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int     @unique
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            Int       @id @default(autoincrement())
  publicId      String    @unique @default(nanoid())
  userId        Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
  totalAmount   Float
  totalQuantity Int

  @@index([userId], type: Hash)
}

model wishlist {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @default(nanoid())
  userId    Int       @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@index([userId], type: Hash)
}
